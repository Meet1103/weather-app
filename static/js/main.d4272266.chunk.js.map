{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Description.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","autoComplete","type","name","placeholder","required","value","Description","_ref","city","country","temperature","humidity","icon","description","error","img","src","concat","alt","App","state","undefined","_callee","e","response","data","regenerator_default","wrap","_context","prev","next","preventDefault","process","target","elements","fetch","sent","json","_this","setState","sys","main","temp","weather","stop","src_Components_Title","src_Components_Form","this","src_Components_Description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4272266.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Title.css\"\r\n\r\nconst Title = () => {\r\n    return(\r\n        <div className=\"Title\">\r\n            <p>Weather Application</p>\r\n            <p>Know weather of any city n country</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./Form.css\"\r\n\r\nconst Form = (props) => {\r\n    return(\r\n            <form className=\"Form\" onSubmit={props.getWeather} autoComplete=\"off\">\r\n                <div className=\"wrapper\">\r\n                    <input className=\"inputs\" type=\"text\" name=\"city\" placeholder=\"City\" required/>\r\n                    <br /> <br/>\r\n                    <input className=\"inputs\" type=\"text\" name=\"country\" placeholder=\"Country\" required/>\r\n                    <br /> <br/>\r\n                    <input type=\"submit\" value=\"Get Weather\" className=\"button\" />\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport \"./Description.css\"\r\n\r\nconst Description = ({city ,country ,temperature ,humidity ,icon ,description ,error}) => {\r\n\r\n    const img = icon\r\n\r\n    return(\r\n        <div className=\"results\">\r\n            {city && country && <p>~  Location : {city},{country}</p>}\r\n            {temperature && <p>~  Temperature : {temperature}</p>}\r\n            {humidity && <p>~  Humidity : {humidity}</p>}\r\n            {description && <p>~  Description : {description}</p>}\r\n            {icon && <img src={`http://openweathermap.org/img/w/${img}.png`} alt=\"icon\" />}\r\n            {error && <p>~  {error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Description;","import React, { Component } from \"react\"\nimport Title from \"./Components/Title\"\nimport Form from \"./Components/Form\"\nimport Description from \"./Components/Description\"\nimport \"./App.css\"\n  \nclass App extends Component {\n\n  state = {\n    city : undefined,\n    country : undefined,\n    temperature : undefined,\n    icon : undefined,\n    description : undefined,\n    error : undefined\n  }\n\n\n  getWeather = async (e) => {\n\n    e.preventDefault()\n\n    const api = process.env.REACT_APP_API\n\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n      \n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api}&units=metric`);\n    const data = await response.json();\n  \n    this.setState({\n      city : data.name,\n      country : data.sys.country,\n      temperature : data.main.temp,\n      humidity : data.main.humidity,\n      icon : data.weather[0].icon,\n      description : data.weather[0].description,\n      error : undefined\n    })\n}\n\n\n  render() {\n    return (\n      <div className=\"Main\">\n          <div className=\"title\">\n            <Title />\n          </div>\n          <div className=\"form\" >\n            <Form getWeather={this.getWeather} />\n          </div>\n          <div className=\"description\">\n            <Description\n            city={this.state.city}\n            country={this.state.country}\n            temperature={this.state.temperature}\n            humidity={this.state.humidity}\n            icon={this.state.icon}\n            description={this.state.description}\n            /> \n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}